################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################

module CZMQ
  module FFI
    
    # actor
    class Zactor
      class DestroyedError < RuntimeError; end
      
      # Boilerplate for self pointer, initializer, and finalizer
      class << self
        alias :__new :new
      end
      def initialize ptr, finalize=true
        @ptr = ptr
        if @ptr.null?
          @ptr = nil # Remove null pointers so we don't have to test for them.
        elsif finalize
          @finalizer = self.class.send :create_finalizer_for, @ptr
          ObjectSpace.define_finalizer self, @finalizer
        end
      end
      def self.create_finalizer_for ptr
        Proc.new do
          ptr_ptr = ::FFI::MemoryPointer.new :pointer
          ptr_ptr.write_pointer ptr
          ::CZMQ::FFI.zactor_destroy ptr_ptr
        end
      end
      def null?
        !@ptr or ptr.null?
      end
      # Return internal pointer
      def __ptr
        raise DestroyedError unless @ptr
        @ptr
      end
      # So external Libraries can just pass the Object to a FFI function which expects a :pointer
      alias_method :to_ptr, :__ptr
      # Nullify internal pointer and return pointer pointer
      def __ptr_give_ref
        raise DestroyedError unless @ptr
        ptr_ptr = ::FFI::MemoryPointer.new :pointer
        ptr_ptr.write_pointer @ptr
        ObjectSpace.undefine_finalizer self if @finalizer
        @finalizer = nil
        @ptr = nil
        ptr_ptr
      end
      
      # Create a new callback of the following type:
      # Actors get a pipe and arguments from caller
      #     typedef void (zactor_fn) (     
      #         zsock_t *pipe, void *args);
      #
      # WARNING: If your Ruby code doesn't retain a reference to the
      #   FFI::Function object after passing it to a C function call,
      #   it may be garbage collected while C still holds the pointer,
      #   potentially resulting in a segmentation fault.
      def self.fn
        ::FFI::Function.new :void, [:pointer, :pointer], blocking: true do |pipe, args|
          pipe = Zsock.__new pipe, false
          yield pipe, args
        end
      end
      
      # Create a new actor passing arbitrary arguments reference.
      def self.new task, args
        ptr = ::CZMQ::FFI.zactor_new task, args
        
        __new ptr
      end
      
      # Destroy an actor.
      def destroy
        return unless @ptr
        self_p = __ptr_give_ref
        result = ::CZMQ::FFI.zactor_destroy self_p
        result
      end
      
      # Send a zmsg message to the actor, take ownership of the message
      # and destroy when it has been sent.                             
      def send msg_p
        raise DestroyedError unless @ptr
        msg_p = msg_p.__ptr_give_ref
        result = ::CZMQ::FFI.zactor_send @ptr, msg_p
        result
      end
      
      # Receive a zmsg message from the actor. Returns NULL if the actor 
      # was interrupted before the message could be received, or if there
      # was a timeout on the actor.                                      
      def recv
        raise DestroyedError unless @ptr
        result = ::CZMQ::FFI.zactor_recv @ptr
        result = Zmsg.__new result, true
        result
      end
      
      # Probe the supplied object, and report if it looks like a zactor_t.
      def self.is self_
        result = ::CZMQ::FFI.zactor_is self_
        result
      end
      
      # Probe the supplied reference. If it looks like a zactor_t instance,
      # return the underlying libzmq actor handle; else if it looks like   
      # a libzmq actor handle, return the supplied value.                  
      def self.resolve self_
        result = ::CZMQ::FFI.zactor_resolve self_
        result
      end
      
      # Return the actor's zsock handle. Use this when you absolutely need
      # to work with the zsock instance rather than the actor.            
      def sock
        raise DestroyedError unless @ptr
        result = ::CZMQ::FFI.zactor_sock @ptr
        result = Zsock.__new result, false
        result
      end
      
      # Self test of this class.
      def self.test verbose
        verbose = !(0==verbose||!verbose) # boolean
        result = ::CZMQ::FFI.zactor_test verbose
        result
      end
    end
    
  end
end

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
