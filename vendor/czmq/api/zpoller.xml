<class name = "zpoller">
    event-driven reactor

    <include filename = "../license.xml" />

    <constructor>
        Create new poller; the reader can be a libzmq socket (void *), a zsock_t
        instance, or a zactor_t instance.
        <argument name = "reader" type = "anything" variadic = "1" />
    </constructor>

    <destructor>
        Destroy a poller
    </destructor>

    <method name = "print" exclude = "1" />

    <method name = "add">
        Add a reader to be polled. Returns 0 if OK, -1 on failure. The reader may
        be a libzmq void * socket, a zsock_t instance, or a zactor_t instance.
        <argument name = "reader" type = "anything" />
        <return type = "integer" />
    </method>

    <method name = "remove">
        Remove a reader from the poller; returns 0 if OK, -1 on failure. The
        reader may be a libzmq void * socket, a zsock_t instance, or a zactor_t
        instance.
        <argument name = "reader" type = "anything" />
        <return type = "integer" />
    </method>

    <method name = "wait">
        Poll the registered readers for I/O, return first reader that has input.
        The reader will be a libzmq void * socket, or a zsock_t or zactor_t
        instance as specified in zpoller_new/zpoller_add. The timeout should be
        zero or greater, or -1 to wait indefinitely. Socket priority is defined
        by their order in the poll list. If you need a balanced poll, use the low
        level zmq_poll method directly. If the poll call was interrupted (SIGINT),
        or the ZMQ context was destroyed, or the timeout expired, returns NULL.
        You can test the actual exit condition by calling zpoller_expired () and
        zpoller_terminated (). The timeout is in msec.
        <argument name = "timeout" type = "integer" />
        <return  type = "anything" />
    </method>

    <method name = "expired">
        Return true if the last zpoller_wait () call ended because the timeout
        expired, without any error.
        <return type = "boolean" />
    </method>

    <method name = "terminated">
        Return true if the last zpoller_wait () call ended because the process
        was interrupted, or the parent context was destroyed.
        <return type = "boolean" />
    </method>

    <method name = "ignore interrupts">
        Ignore zsys_interrupted flag in this poller. By default, a zpoller_wait will
        return immediately if detects zsys_interrupted is set to something other than
        zero. Calling zpoller_ignore_interrupts will supress this behavior.
    </method>

    <method name = "test" singleton = "1">
        Self test of this class
        <argument name = "verbose" type = "boolean" />
    </method>
</class>

