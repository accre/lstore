/*
Copyright 2016 Vanderbilt University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/** \file
* Autogenerated public API
*/

#ifndef ACCRE_LIO_DATA_SERVICE_ABSTRACT_H_INCLUDED
#define ACCRE_LIO_DATA_SERVICE_ABSTRACT_H_INCLUDED

#include <apr_thread_cond.h>
#include <apr_thread_proc.h>
#include <apr_hash.h>
#include <inttypes.h>
#include <lio/visibility.h>
#include <lio/ex3_fwd.h>

#ifdef __cplusplus
extern "C" {
#endif

// Typedefs
typedef struct lio_data_service_fn_t lio_data_service_fn_t;
typedef int64_t ds_int_t;
typedef void data_attr_t;
typedef void data_cap_set_t;
typedef void data_cap_t;
typedef void data_probe_t;
typedef void data_inquire_t;

typedef void (*lio_ds_destroy_service_fn_t)(lio_data_service_fn_t *);
typedef void (*lio_ds_print_running_config_fn_t)(lio_data_service_fn_t *ds, FILE *fd, int print_section_heading);
typedef void (*lio_ds_translate_cap_set_fn_t)(lio_data_service_fn_t *ds, char *rid_key, char *ds_key, data_cap_set_t *cs);
typedef data_cap_set_t *(*lio_ds_new_cap_set_fn_t)(lio_data_service_fn_t *);
typedef void *(*lio_ds_cap_auto_warm_fn_t)(lio_data_service_fn_t *, data_cap_set_t *dcs);
typedef void (*lio_ds_cap_stop_warm_fn_t)(lio_data_service_fn_t *, void *warm);
typedef data_cap_t *(*lio_ds_get_cap_fn_t)(lio_data_service_fn_t *, data_cap_set_t *cs, int key);
typedef int (*lio_ds_set_cap_fn_t)(lio_data_service_fn_t *, data_cap_set_t *cs, int key, data_cap_t *cap);
typedef void (*lio_ds_destroy_cap_set_fn_t)(lio_data_service_fn_t *, data_cap_set_t *caps, int free_cap);
typedef data_attr_t *(*lio_ds_new_attr_fn_t)(lio_data_service_fn_t *);
typedef int (*lio_ds_get_attr_fn_t)(lio_data_service_fn_t *, data_attr_t *attr, int key, void *val, int size);
typedef int (*lio_ds_set_attr_fn_t)(lio_data_service_fn_t *, data_attr_t *attr, int key, void *val);
typedef void (*lio_ds_destroy_attr_fn_t)(lio_data_service_fn_t *, data_attr_t *attr);
typedef int (*lio_ds_get_default_attr_fn_t)(lio_data_service_fn_t *, data_attr_t *attr);
typedef int (*lio_ds_set_default_attr_fn_t)(lio_data_service_fn_t *, data_attr_t *attr);
typedef data_probe_t *(*lio_ds_new_probe_fn_t)(lio_data_service_fn_t *);
typedef int (*lio_ds_get_probe_fn_t)(lio_data_service_fn_t *, data_probe_t *probe, int key, void *val, int size);
typedef void (*lio_ds_destroy_probe_fn_t)(lio_data_service_fn_t *, data_probe_t *probe);
typedef char *(*lio_ds_res2rid_fn_t)(lio_data_service_fn_t *ds, char *ds_key);
typedef data_inquire_t *(*lio_ds_new_inquire_fn_t)(lio_data_service_fn_t *ds);
typedef void (*lio_ds_destroy_inquire_fn_t)(lio_data_service_fn_t *ds, data_inquire_t *space);
typedef ds_int_t (*lio_ds_res_inquire_get_fn_t)(lio_data_service_fn_t *ds, int type, data_inquire_t *space);
typedef gop_op_generic_t *(*lio_ds_res_inquire_fn_t)(lio_data_service_fn_t *, char *res, data_attr_t *attr, data_inquire_t *space, int timeout);
typedef gop_op_generic_t *(*lio_ds_allocate_fn_t)(lio_data_service_fn_t *, char *res, data_attr_t *attr, ds_int_t size, data_cap_set_t *caps, int timeout);
typedef gop_op_generic_t *(*lio_ds_remove_fn_t)(lio_data_service_fn_t *, data_attr_t *dattr, data_cap_t *mcap, int timeout);
typedef gop_op_generic_t *(*lio_ds_truncate_fn_t)(lio_data_service_fn_t *, data_attr_t *dattr, data_cap_t *mcap, ex_off_t new_size, int timeout);
typedef gop_op_generic_t *(*lio_ds_probe_fn_t)(lio_data_service_fn_t *, data_attr_t *dattr, data_cap_t *mcap, data_probe_t *probe, int timeout);
typedef gop_op_generic_t *(*lio_ds_modify_count_fn_t)(lio_data_service_fn_t *, data_attr_t *dattr, data_cap_t *mcap, int mode, int captype, int timeout);
typedef gop_op_generic_t *(*lio_ds_read_fn_t)(lio_data_service_fn_t *, data_attr_t *attr, data_cap_t *rcap, ds_int_t off, tbx_tbuf_t *read, ex_off_t boff, ex_off_t len, int timeout);
typedef gop_op_generic_t *(*lio_ds_write_fn_t)(lio_data_service_fn_t *, data_attr_t *attr, data_cap_t *wcap, ds_int_t off, tbx_tbuf_t *write, ex_off_t boff, ex_off_t len, int timeout);
typedef gop_op_generic_t *(*lio_ds_readv_fn_t)(lio_data_service_fn_t *, data_attr_t *attr, data_cap_t *rcap, int n_iov, ex_tbx_iovec_t *iov, tbx_tbuf_t *read, ex_off_t boff, ex_off_t len, int timeout);
typedef gop_op_generic_t *(*lio_ds_writev_fn_t)(lio_data_service_fn_t *, data_attr_t *attr, data_cap_t *wcap, int n_iov, ex_tbx_iovec_t *iov, tbx_tbuf_t *write, ex_off_t boff, ex_off_t len, int timeout);
typedef gop_op_generic_t *(*lio_ds_append_fn_t)(lio_data_service_fn_t *, data_attr_t *attr, data_cap_t *wcap, tbx_tbuf_t *write, ex_off_t boff, ex_off_t len, int timeout);
typedef gop_op_generic_t *(*lio_ds_copy_fn_t)(lio_data_service_fn_t *, data_attr_t *attr, int mode, int ns_type, char *ppath, data_cap_t *src_cap, ds_int_t src_off, data_cap_t *dest_cap, ds_int_t dest_off, ds_int_t len, int timeout);

//* FIXME: leaky
typedef struct lio_ds_ibp_attr_t lio_ds_ibp_attr_t;
typedef struct lio_ds_ibp_alloc_op_t lio_ds_ibp_alloc_op_t;
typedef struct lio_ds_ibp_op_t lio_ds_ibp_op_t;
typedef struct lio_ds_ibp_priv_t lio_ds_ibp_priv_t;
typedef struct lio_ds_ibp_truncate_op_t lio_ds_ibp_truncate_op_t;

// Functions

// Exported types. To be obscured


struct lio_data_service_fn_t {
    void *priv;
    char *type;
    lio_ds_destroy_service_fn_t destroy_service;
    lio_ds_print_running_config_fn_t print_running_config;
    lio_ds_translate_cap_set_fn_t translate_cap_set;
    lio_ds_new_cap_set_fn_t new_cap_set;
    lio_ds_cap_auto_warm_fn_t cap_auto_warm;
    lio_ds_cap_stop_warm_fn_t cap_stop_warm;
    lio_ds_get_cap_fn_t get_cap;
    lio_ds_set_cap_fn_t set_cap;
    lio_ds_destroy_cap_set_fn_t destroy_cap_set;
    lio_ds_new_attr_fn_t new_attr;
    lio_ds_get_attr_fn_t get_attr;
    lio_ds_set_attr_fn_t set_attr;
    lio_ds_destroy_attr_fn_t destroy_attr;
    lio_ds_get_default_attr_fn_t get_default_attr;
    lio_ds_set_default_attr_fn_t set_default_attr;
    lio_ds_new_probe_fn_t new_probe;
    lio_ds_get_probe_fn_t get_probe;
    lio_ds_destroy_probe_fn_t destroy_probe;
    lio_ds_res2rid_fn_t res2rid;
    lio_ds_new_inquire_fn_t new_inquire;
    lio_ds_destroy_inquire_fn_t destroy_inquire;
    lio_ds_res_inquire_get_fn_t res_inquire_get;
    lio_ds_res_inquire_fn_t res_inquire;
    lio_ds_allocate_fn_t allocate;
    lio_ds_remove_fn_t remove;
    lio_ds_truncate_fn_t truncate;
    lio_ds_probe_fn_t probe;
    lio_ds_modify_count_fn_t modify_count;
    lio_ds_read_fn_t read;
    lio_ds_write_fn_t write;
    lio_ds_readv_fn_t readv;
    lio_ds_writev_fn_t writev;
    lio_ds_append_fn_t append;
    lio_ds_copy_fn_t copy;
};

// Preprocessor functions
#define ds_read(ds, attr, rcap, off, readfn, boff, len, to) (ds)->read(ds, attr, rcap, off, readfn, boff, len, to)

LIO_API ibp_context_t *hack_ds_ibp_context_get(lio_data_service_fn_t *arg);

#ifdef __cplusplus
}
#endif

#endif /* ^ ACCRE_LIO_DATA_SERVICE_ABSTRACT_H_INCLUDED ^ */ 
